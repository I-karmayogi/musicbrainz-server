{
  title: 'MBS-11156',
  commands: [
    {
      command: 'open',
      target: '/release/add',
      value: '',
    },
    {
      command: 'type',
      target: 'id=name',
      value: 'MBS-11156',
    },
    {
      command: 'type',
      target: "id=ac-source-single-artist",
      value: 'Various Artists',
    },
    {
      command: 'pause',
      target: '1000',
      value: '',
    },
    {
      command: 'click',
      target: "xpath=//ul[@id='ac-source-single-artist-menu']//li[contains(@class, 'option-item')][contains(., 'Various Artists')]",
      value: '',
    },
    {
      command: 'click',
      target: "xpath=//a[@href='#tracklist']",
      value: '',
    },
    {
      command: 'uncheck',
      target: "xpath=//div[@id='add-medium-dialog']//input[@name='lines-have-numbers']",
      value: '',
    },
    {
      command: 'uncheck',
      target: "xpath=//div[@id='add-medium-dialog']//input[@name='lines-have-artists']",
      value: '',
    },
    {
      command: 'uncheck',
      target: "xpath=//div[@id='add-medium-dialog']//input[@name='use-numbers']",
      value: '',
    },
    {
      command: 'check',
      target: "xpath=//div[@id='add-medium-dialog']//input[@name='use-titles']",
      value: '',
    },
    {
      command: 'uncheck',
      target: "xpath=//div[@id='add-medium-dialog']//input[@name='use-lengths']",
      value: '',
    },
    {
      command: 'type',
      target: "xpath=//div[@id='add-medium-parser']//textarea[contains(@class, 'tracklist')]",
      value: 'test',
    },
    {
      command: 'click',
      target: "xpath=//div[@id='add-medium-dialog']//button[contains(text(), 'Add medium')]",
      value: '',
    },
    {
      command: 'select',
      target: "xpath=(//select[contains(@id, 'medium-format-')])[1]",
      value: 'label=Vinyl',
    },
    // Check that the parsed track does use "Various Artists" from the release artist.
    {
      command: 'assertEval',
      target: "document.querySelector('#tracklist input[id$=-single-artist]').value",
      value: '',
    },
    {
      command: 'assertEval',
      target: "document.querySelector('#tracklist input[id$=-single-artist]').classList.contains('lookup-performed')",
      value: 'false',
    },
    // Manually set the track artist to "Various Artists".
    {
      command: 'type',
      target: "css=#tracklist input[id$=-single-artist]",
      value: '89ad4ac3-39f7-470e-963a-56509c546377',
    },
    {
      command: 'pause',
      target: '500',
      value: '',
    },
    {
      command: 'check',
      target: 'id=confirm-va',
      value: '',
    },
    // Parse tracks again, and check that "Various Artists" isn't unset.
    {
      command: 'click',
      target: 'css=button.open-track-parser',
      value: '',
    },
    {
      command: 'check',
      target: "xpath=//div[@id='track-parser-dialog']//input[@name='lines-have-artists']",
      value: '',
    },
    {
      command: 'check',
      target: "xpath=//div[@id='track-parser-dialog']//input[@name='use-artists']",
      value: '',
    },
    {
      command: 'click',
      target: 'id=parse-tracks',
      value: '',
    },
    {
      command: 'click',
      target: 'id=close-track-parser',
      value: '',
    },
    {
      command: 'assertEval',
      target: "document.querySelector('#tracklist input[id$=-single-artist]').value",
      value: 'Various Artists',
    },
    {
      command: 'assertEval',
      target: "document.querySelector('#tracklist input[id$=-single-artist]').classList.contains('lookup-performed')",
      value: 'true',
    },
    {
      command: 'click',
      target: "xpath=//a[@href='#edit-note']",
      value: '',
    },
    {
      command: 'assertEval',
      target: "document.querySelector('a[href=\"#tracklist\"]').parentNode.classList.contains('error-tab')",
      value: 'false',
    },
    {
      command: 'assertEval',
      target: "Array.from(document.querySelectorAll('#edit-note div.warning')).some(x => x.textContent.includes('Some errors were detected'))",
      value: 'false',
    },
    {
      command: 'open',
      target: '/',
      value: '',
    },
    {
      command: 'assertBeforeUnloadAlertWasShown',
      target: '',
      value: '',
    },
  ],
}
